find_program(MONO_EXECUTABLE HINT ${MONO_ROOT} mono)
find_program(MCS_EXECUTABLE HINT ${MONO_ROOT} mcs)

if(WIN32)  # Windows
    if(NOT MONO_ROOT OR NOT EXISTS ${MONO_ROOT})
        # Attempt to set mono root dir based on executable path or guess
        if(MONO_EXECUTABLE)
            get_filename_component(MONO_ROOT ${MONO_EXECUTABLE} ABSOLUTE)
            get_filename_component(MONO_ROOT ${MONO_ROOT} DIRECTORY)
            get_filename_component(MONO_ROOT ${MONO_ROOT} DIRECTORY)
        elseif(EXISTS "C:/Program Files/Mono")
            set(MONO_ROOT "C:/Program Files/Mono")
        elseif(EXISTS "C:/Mono")
            set(MONO_ROOT "C:/Mono")
        endif(MONO_EXECUTABLE)
    endif(NOT MONO_ROOT OR NOT EXISTS ${MONO_ROOT})

    if(MONO_ROOT AND EXISTS ${MONO_ROOT})
        set(MONO_INCLUDE_DIRS ${MONO_ROOT}/include/mono-2.0)
        set(MONO_LIBRARY_DIRS ${MONO_ROOT}/lib)
        set(MONO_LIBRARIES mono-2.0-sgen ws2_32 psapi ole32 winmm oleaut32 advapi32 version)
        set(MONO_LDFLAGS -L${MONO_LIBRARY_DIRS} -lmono-2.0-sgen -mms-bitfields -mwindows  -lws2_32 -lpsapi -lole32 -lwinmm -loleaut32 -ladvapi32 -lversion)
        set(MONO_CFLAGS -I${MONO_INCLUDE_DIRS})

        find_program(MONO_EXECUTABLE mono PATH ${MONO_ROOT}/bin NO_DEFAULT_PATH)
        find_program(MCS_EXECUTABLE mcs PATH ${MONO_ROOT}/bin PATH ${MONO_ROOT}/bin NO_DEFAULT_PATH)

        set(MONO_FOUND TRUE)
    else(MONO_ROOT AND EXISTS ${MONO_ROOT})
        message(FATAL_ERROR "Could not find Mono root dir, try setting the MONO_ROOT variable to the mono installation directory")
        set(MONO_FOUND FALSE)
    endif(MONO_ROOT AND EXISTS ${MONO_ROOT})
ELSE(WIN32)  # Unix
    FindPkgConfig()
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(MONO Mono_FIND_REQUIRED mono-2)
    else(PKG_CONFIG_FOUND)
        if(NOT MONO_ROOT OR NOT EXISTS ${MONO_ROOT})
            # Attempt to set mono root dir based on executable path or guess
            if(MONO_EXECUTABLE)
                get_filename_component(MONO_ROOT ${MONO_EXECUTABLE} ABSOLUTE)
                get_filename_component(MONO_ROOT ${MONO_ROOT} DIRECTORY)
                get_filename_component(MONO_ROOT ${MONO_ROOT} DIRECTORY)
                elseif(EXISTS "C:/Program Files/Mono")
                    set(MONO_ROOT "C:/Program Files/Mono")
                elseif(EXISTS "C:/Mono")
                    set(MONO_ROOT "C:/Mono")
            endif(MONO_EXECUTABLE)
            message(FATAL_ERROR "TODO: Set guesses for Unix")
        endif(NOT MONO_ROOT OR NOT EXISTS ${MONO_ROOT})
        
        if(MONO_ROOT AND EXISTS ${MONO_ROOT})
            set(MONO_INCLUDE_DIRS ${MONO_ROOT}/include/mono-2.0)
            set(MONO_LIBRARY_DIRS ${MONO_ROOT}/lib)
            set(MONO_LIBRARIES)
            set(MONO_LDFLAGS -L${MONO_LIBRARY_DIRS})
            set(MONO_CFLAGS -I${MONO_INCLUDE_DIRS})

            message(FATAL_ERROR "TODO: Set flags and dirs for Unix")
            
            find_program(MONO_EXECUTABLE mono PATH ${MONO_ROOT}/bin NO_DEFAULT_PATH)
            find_program(MCS_EXECUTABLE mcs PATH ${MONO_ROOT}/bin PATH ${MONO_ROOT}/bin NO_DEFAULT_PATH)
            
            set(MONO_FOUND TRUE)
        else(MONO_ROOT AND EXISTS ${MONO_ROOT})
            message(FATAL_ERROR "Could not find Mono root dir, try setting the MONO_ROOT variable to the mono installation directory")
            set(MONO_FOUND FALSE)
        endif(MONO_ROOT AND EXISTS ${MONO_ROOT})
    endif(PkgConfig_FOUND)
endif(WIN32)

if(MONO_FOUND)
    if(NOT Mono_FIND_REQUIRED)
        MESSAGE(STATUS "Found mono: ${MONO_EXECUTABLE}")
        MESSAGE(STATUS "Found mcs: ${MCS_EXECUTABLE}")

        if(MONO_LIBRARY_DIRS)
            MESSAGE(STATUS "Found Mono development files: headers at ${MONO_INCLUDE_DIRS}, libraries at ${MONO_LIBRARY_DIRS}")
        else(MONO_LIBRARY_DIRS)
            MESSAGE(STATUS "Found Mono development files: headers at ${MONO_INCLUDE_DIRS}")
        endif(MONO_LIBRARY_DIRS)
    endif(NOT Mono_FIND_REQUIRED)
else(MONO_FOUND)
    if(Mono_FIND_REQUIRED)
        MESSAGE(FATAL_ERROR "Could not find one or more of the following: mono, mcs or Mono development files")
    endif(Mono_FIND_REQUIRED)
endif(MONO_FOUND)

MARK_AS_ADVANCED(MONO_EXECUTABLE MCS_EXECUTABLE)

